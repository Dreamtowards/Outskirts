
IO Models - BIO / NIO / AIO


BIO - Blocking IO


ServerSocket serverSocket = ServerSocket.bind(1080);
while (true) {
    Socket socket = serverSocket.accept();  //accept() is blocking while have a new client to connect server
    new Thread(new ConnectionProcessor(socket)).start();
}

1 client = 1 server processing thread



NIO - NotBlocking IO


Selector selector = new Selector();

ServerSocket serverSocket = ServerSocket.bind(1080);

serverSocket.register(selector, OP_ACCEPT);

while (true) {
    selector.select();
    Iterator<Socket> it = selector.selectedKeys().iterator();
    while (it.hasNext) {
        SelectionKey key = it.next();
        Socket socket = key.socket();

        if (key.isAcceptable()) {
            processAccept(socket);
        }
        if (key.isReadable()) {
            processRead(socket);
        }
        if (key.isWritable()) {
            processWrite(socket);
        }
        it.remove();
    }
}




AIO - AsyncIO

ServerSocket serverSocket = ServerSocket.bind(1080).attachEvent(ON_ACCEPT, new CompletionHandler() {
    onCompleted(Socket clientSocket) {
        clientSocket.send("connected.".toByteBuffer(), new CompletionHandler() {
            onCompleted(ByteBuffer buffer) {
                if (buffer.hasRemaining()) {
                    clientSocket.write(buffer, this);
                } else {
                    clientSocket.read(allocateByteBuffer(), new CompletionHandler() {
                        onCompleted(ByteBuffer buffer) {
                            if (isDataComplete(buffer)) {
                                print("received data: " + String.of(buffer));
                            }
                        }
                    });
                }
            }
        });
    }
})